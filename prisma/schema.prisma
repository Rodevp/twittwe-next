// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  //tipo string autogenerado     mapeamos el nombre y de tipo objectId para mongo
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String? // ? -> opcional como en TS
  username        String?        @unique
  bio             String?
  email           String?        @unique
  emailVerified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedPassword  String?
  createAt        DateTime       @default(now())
  updateAt        DateTime       @updatedAt
  followingsId    String[]       @db.ObjectId //Type[] -> declaramos un arreglo de valores (mongo)
  hasNotification Boolean?
  Post            Post[]
  Comment         Comment[]
  Notification    Notification[]
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String    @db.ObjectId
  likedIds  String[]  @db.ObjectId
  image     String?
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
